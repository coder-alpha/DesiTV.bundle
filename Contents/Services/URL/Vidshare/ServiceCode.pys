import string, re

HTTP_HEADERS = {
	'Accept	text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
	'Accept-Encoding:	gzip, deflate',
	'Accept-Language:	en-US,en;q=0.5',
	'Connection:		keep-alive',
	'Referer:		http://www.vidshare.us',
	'User-Agent:		Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
}

########################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	
	try:
		page_data = HTML.ElementFromURL(url)
		keys = page_data.xpath("//script//text()")
		img = page_data.xpath("//img/@src")[0]
		thumb = img
		
		# http://103.43.94.69/l7z7btxjdqnhgn4vfj2bga6cqdroexc376gj3a6mmo4emsbchtortpisujva/v.flv
	except:
		thumb = url
		
	title = 'VidShare Redirect Page'
	summary = 'Summary info Page'
	
	return VideoClipObject(
		title = title,
		summary = summary + '\n\n',
		thumb = Resource.ContentsOfURLWithFallback(url = thumb, fallback='icon-cover.png')
	)
	
####################################################################################################
def MediaObjectsForURL(url):

	#Log("url-----------" + url)
	
	return [
		MediaObject(
			container = Container.FLV,
			video_codec = VideoCodec.H264,
			video_resolution = '720',
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	try:
		page_data = HTML.ElementFromURL(url)
		keys = page_data.xpath("//script//text()")
		img = page_data.xpath("//img/@src")[0]
		thumb = img
		img = img.replace('//','|')
		host = img.split('/')[0]
		host = host.replace('|','//')
		stuff = keys[len(keys)-2]
		mykey = 'not found'
		key = re.findall ( 'H1D\|(.*?)\|SD', stuff, re.MULTILINE)
		if len(key) > 0:
			mykey = key[0]
		else:
			key = re.findall ( 'SD\|(.*?)\|sources', stuff, re.MULTILINE)
			if len(key) > 0:
				mykey = key[0]
			else:
				mykey = re.findall ( 'flv\|(.*?)\|sources', stuff, re.MULTILINE)[0]
		
		if mykey.find('|') != -1:
			mykey = mykey.split('|');
			mykey = mykey[len(mykey)-1]
		
		url0 = host + '/' + mykey + '/' + 'v.flv'
		# http://103.43.94.69/l7z7btxjdqnhgn4vfj2bga6cqdroexc376gj3a6mmo4emsbchtortpisujva/v.flv
	except:
		url0 = url
	
	return IndirectResponse(VideoClipObject, key=url0)
